# Generated by Django 5.2.6 on 2025-09-20 17:49

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('coupons', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Influencer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Influencer's display name", max_length=200)),
                ('email', models.EmailField(help_text='Login email for the influencer', max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=20)),
                ('username', models.CharField(help_text='Unique username for login', max_length=50, unique=True)),
                ('api_key', models.CharField(blank=True, help_text='API key for authentication', max_length=64, unique=True)),
                ('instagram_handle', models.CharField(blank=True, help_text='Instagram username without @', max_length=100)),
                ('youtube_channel', models.CharField(blank=True, help_text='YouTube channel name', max_length=100)),
                ('tiktok_handle', models.CharField(blank=True, help_text='TikTok username without @', max_length=100)),
                ('website', models.URLField(blank=True, help_text='Personal website or blog')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the influencer can access the dashboard')),
                ('commission_rate', models.DecimalField(decimal_places=2, default=0.0, help_text='Commission percentage (e.g., 5.00 for 5%)', max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login', models.DateTimeField(blank=True, help_text='Last dashboard access', null=True)),
                ('notes', models.TextField(blank=True, help_text='Internal admin notes about this influencer')),
            ],
            options={
                'verbose_name': 'Influencer',
                'verbose_name_plural': 'Influencers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InfluencerLoginLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_time', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('success', models.BooleanField(default=True)),
                ('influencer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='login_logs', to='influencers.influencer')),
            ],
            options={
                'ordering': ['-login_time'],
            },
        ),
        migrations.CreateModel(
            name='InfluencerCoupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('target_uses', models.PositiveIntegerField(blank=True, help_text='Target number of coupon uses', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes about this coupon assignment')),
                ('assigned_by', models.ForeignKey(blank=True, help_text='Admin who assigned this coupon', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('coupon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='influencers', to='coupons.coupon')),
                ('influencer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupons', to='influencers.influencer')),
            ],
            options={
                'ordering': ['-assigned_at'],
                'unique_together': {('influencer', 'coupon')},
            },
        ),
    ]
